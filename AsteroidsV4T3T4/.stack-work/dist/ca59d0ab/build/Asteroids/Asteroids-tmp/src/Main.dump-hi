
==================== FINAL INTERFACE ====================
2017-10-08 00:38:10.7539333 UTC

interface main@main:Main 8002
  interface hash: 892eadc9d3091f0527dddd170ac9ccfb
  ABI hash: 43994c506610af82d5c8928a98924fad
  export-list hash: 501e338f74b8a0459223ebcf1d7a1ee8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0aba6a213a16596879d9748adf800d4a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main..*
  Main..+
  Main..-
  Main.bulletVelocity
  Main.cycleCoordinates
  Main.drawWorld
  Main.handleEvents
  Main.initialWorld
  Main.innerProduct
  Main.limitMag
  Main.magV
  Main.main
  Main.moveTime
  Main.norm
  Main.restoreToScreen
  Main.rotateV
  Main.scannerLength
  Main.scannerTimer
  Main.simulateWorld
  Main.splitRock
  Main.spotArea
  Main.ufoVelocity
  Main.waitAfterShot
  Main.Action{Main.Move Main.Scan Main.Shoot}
  Main.Age
  Main.AsteroidWorld{Main.GameOver Main.Play}
  Main.Bullet{Main.Bullet}
  Main.PointInSpace
  Main.Rock{Main.Rock}
  Main.Ship{Main.Ship}
  Main.Size
  Main.UFO{Main.UFO}
  Main.UfoPhase{Main.Empty Main.Phase}
  Main.Velocity
module dependencies:
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-Dsh0J6RJGCYIX4KzhPpy5R
                      GLUT-2.7.0.12@GLUT-2.7.0.12-DC8hzFoSREsLOe0a29m1po
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.2.0@OpenGL-3.0.2.0-6fbDRkN7rpfG63nVz30IBa
                      OpenGLRaw-3.2.5.0@OpenGLRaw-3.2.5.0-8JxKpZbO2kWCx46iLc1G4X
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi
                      gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1 stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Debug.Trace 5d15fa13ecafd28bc71693cbbe158c3e
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss bf67b0e05def334587dfecab9a36e1dd
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Color 6fba704f039696621c6ccead346d49ee
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Display af29981e939252b30d71cc51556f99a2
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Picture 6416cbfb640490da3b20f10312b7de20
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Display 5fd9b29564627c0e4c8a1e6327336ed6
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Game cd4fb24b4b520416f44f3f5de79790dc
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Simulate cf92d8de0f8d78549f191e80895504ad
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Internals.Interface.Backend.Types 8461fb1eb67c22da2456dcf4acc9e26b
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Internals.Interface.Event 9324ee6844358392ee004e7b4c424a6c
import  -/  gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture 3c80646b5e5aa2d2fa3766ba0d19eaf4
fixities infixl 7 .*, infixl 6 .+, infixl 6 .-
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fEqAction :: GHC.Classes.Eq Main.Action
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Action Main.$fEqAction_$c== Main.$fEqAction_$c/= -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fEqAction_$c/= :: Main.Action -> Main.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Action) (b :: Main.Action) ->
                 case Main.$fEqAction_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fEqAction_$c== :: Main.Action -> Main.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Action) (ds1 :: Main.Action) ->
                 case ds of wild {
                   Main.Scan a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Scan b1 b2 b3
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Main.Rock
                                  Main.$fEqRock
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case a2 of ww { (,) ww1 ww2 ->
                                case b2 of ww3 { (,) ww4 ww5 ->
                                case ww1 of wild3 { GHC.Types.F# x ->
                                case ww4 of wild4 { GHC.Types.F# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww2 of wild6 { GHC.Types.F# x1 ->
                                     case ww5 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x1 y1) of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True -> GHC.Classes.eqInt a3 b3 } } } } } } } } } }
                   Main.Move a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Move b1 -> GHC.Classes.eqInt a1 b1 }
                   Main.Shoot a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Shoot b1 b2
                        -> case a1 of ww { Main.Rock ww1 ww2 ww3 ->
                           case ww1 of ww4 { (,) ww5 ww6 ->
                           case ww5 of ww7 { GHC.Types.F# ww8 ->
                           case b1 of ww9 { Main.Rock ww10 ww11 ww12 ->
                           case ww10 of ww13 { (,) ww14 ww15 ->
                           case ww14 of ww16 { GHC.Types.F# ww17 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# ww8 ww17) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww6 of wild3 { GHC.Types.F# x ->
                                case ww15 of wild4 { GHC.Types.F# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww2 of wild6 { GHC.Types.F# x1 ->
                                     case ww11 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x1 y1) of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww3 of ww18 { (,) ww19 ww20 ->
                                          case ww12 of ww21 { (,) ww22 ww23 ->
                                          case ww19 of wild9 { GHC.Types.F# x2 ->
                                          case ww22 of wild10 { GHC.Types.F# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x2 y2) of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww20 of wild12 { GHC.Types.F# x3 ->
                                               case ww23 of wild13 { GHC.Types.F# y3 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.eqFloat# x3 y3) of wild14 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> GHC.Classes.eqInt
                                                      a2
                                                      b2 } } } } } } } } } } } } } } } } } } } } } } }) -}
ae0f259c37074dbb8f0166254b567b91
  $fEqAsteroidWorld :: GHC.Classes.Eq Main.AsteroidWorld
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.AsteroidWorld
                  Main.$fEqAsteroidWorld_$c==
                  Main.$fEqAsteroidWorld_$c/= -}
ae0f259c37074dbb8f0166254b567b91
  $fEqAsteroidWorld_$c/= ::
    Main.AsteroidWorld -> Main.AsteroidWorld -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.AsteroidWorld) (b :: Main.AsteroidWorld) ->
                 case Main.$fEqAsteroidWorld_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ae0f259c37074dbb8f0166254b567b91
  $fEqAsteroidWorld_$c== ::
    Main.AsteroidWorld -> Main.AsteroidWorld -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.AsteroidWorld)
                   (ds1 :: Main.AsteroidWorld) ->
                 case ds of wild {
                   Main.Play a1 a2 a3 a4
                   -> case ds1 of wild1 {
                        Main.Play b1 b2 b3 b4
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Main.Rock
                                  Main.$fEqRock
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case a2 of ww { Main.Ship ww1 ww2 ->
                                case ww1 of ww3 { (,) ww4 ww5 ->
                                case ww4 of ww6 { GHC.Types.F# ww7 ->
                                case b2 of ww8 { Main.Ship ww9 ww10 ->
                                case ww9 of ww11 { (,) ww12 ww13 ->
                                case ww12 of ww14 { GHC.Types.F# ww15 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# ww7 ww15) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww5 of wild4 { GHC.Types.F# x ->
                                     case ww13 of wild5 { GHC.Types.F# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x y) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2 of ww16 { (,) ww17 ww18 ->
                                          case ww10 of ww19 { (,) ww20 ww21 ->
                                          case ww17 of wild7 { GHC.Types.F# x1 ->
                                          case ww20 of wild8 { GHC.Types.F# y1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww18 of wild10 { GHC.Types.F# x2 ->
                                               case ww21 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.eqFloat# x2 y2) of wild12 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case GHC.Classes.$fEq[]_$c==
                                                           @ Main.Bullet
                                                           Main.$fEqBullet
                                                           a3
                                                           b3 of wild13 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> Main.$fEqAsteroidWorld_$c==1
                                                           a4
                                                           b4 } } } } } } } } } } } } } } } } } } } }
                        Main.GameOver -> GHC.Types.False }
                   Main.GameOver
                   -> case ds1 of wild1 {
                        Main.Play ipv ipv1 ipv2 ipv3 -> GHC.Types.False
                        Main.GameOver -> GHC.Types.True } }) -}
b98868f63503e9d83ff1ea682d9c8412
  $fEqAsteroidWorld_$c==1 :: Main.UFO -> Main.UFO -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)),1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.UFO) (w1 :: Main.UFO) ->
                 case w of ww { Main.UFO ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 case w1 of ww10 { Main.UFO ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { (,) ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.F# ww19 ->
                 Main.$w$c==1
                   ww9
                   ww7
                   ww2
                   ww3
                   ww4
                   ww19
                   ww17
                   ww12
                   ww13
                   ww14 } } } } } }) -}
d34f742616c5b127cc04176f334a490a
  $fEqAsteroidWorld_$s$c== ::
    Main.UfoPhase Main.Action
    -> Main.UfoPhase Main.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7f06465b6582992c630a07ad9ddc4fc7
  $fEqBullet :: GHC.Classes.Eq Main.Bullet
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bullet Main.$fEqBullet_$c== Main.$fEqBullet_$c/= -}
7f06465b6582992c630a07ad9ddc4fc7
  $fEqBullet_$c/= :: Main.Bullet -> Main.Bullet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Bullet) (b :: Main.Bullet) ->
                 case Main.$fEqBullet_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7f06465b6582992c630a07ad9ddc4fc7
  $fEqBullet_$c== :: Main.Bullet -> Main.Bullet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Bullet) (w1 :: Main.Bullet) ->
                 case w of ww { Main.Bullet ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.Bullet ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c==2 ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
6a77df680ee4f19ad93f70a2e022306d
  $fEqRock :: GHC.Classes.Eq Main.Rock
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Rock Main.$fEqRock_$c== Main.$fEqRock_$c/= -}
6a77df680ee4f19ad93f70a2e022306d
  $fEqRock_$c/= :: Main.Rock -> Main.Rock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Rock) (b :: Main.Rock) ->
                 case Main.$fEqRock_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6a77df680ee4f19ad93f70a2e022306d
  $fEqRock_$c== :: Main.Rock -> Main.Rock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Rock) (w1 :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.Rock ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c== ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
0b32e19b3380b56bb055d57d959a3c34
  $fEqShip :: GHC.Classes.Eq Main.Ship
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ship Main.$fEqShip_$c== Main.$fEqShip_$c/= -}
0b32e19b3380b56bb055d57d959a3c34
  $fEqShip_$c/= :: Main.Ship -> Main.Ship -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Ship) (b :: Main.Ship) ->
                 case Main.$fEqShip_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0b32e19b3380b56bb055d57d959a3c34
  $fEqShip_$c== :: Main.Ship -> Main.Ship -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Ship) (w1 :: Main.Ship) ->
                 case w of ww { Main.Ship ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.F# ww7 ->
                 case w1 of ww8 { Main.Ship ww9 ww10 ->
                 case ww9 of ww11 { (,) ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.F# ww15 ->
                 Main.$w$c==3 ww7 ww5 ww2 ww15 ww13 ww10 } } } } } }) -}
b98868f63503e9d83ff1ea682d9c8412
  $fEqUFO :: GHC.Classes.Eq Main.UFO
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.UFO Main.$fEqAsteroidWorld_$c==1 Main.$fEqUFO_$c/= -}
b98868f63503e9d83ff1ea682d9c8412
  $fEqUFO_$c/= :: Main.UFO -> Main.UFO -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)),1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.UFO) (b :: Main.UFO) ->
                 case Main.$fEqAsteroidWorld_$c==1 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fEqUfoPhase ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Main.UfoPhase a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Main.UfoPhase a)
                  (Main.$fEqUfoPhase_$c== @ a $dEq)
                  (Main.$fEqUfoPhase_$c/= @ a $dEq) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fEqUfoPhase_$c/= ::
    GHC.Classes.Eq a =>
    Main.UfoPhase a -> Main.UfoPhase a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Main.UfoPhase a)
                   (b :: Main.UfoPhase a) ->
                 case Main.$fEqUfoPhase_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fEqUfoPhase_$c== ::
    GHC.Classes.Eq a =>
    Main.UfoPhase a -> Main.UfoPhase a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fShowAction :: GHC.Show.Show Main.Action
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Action
                  Main.$fShowAction_$cshowsPrec
                  Main.$fShowAction_$cshow
                  Main.$fShowAction_$cshowList -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fShowAction1 :: Main.Action -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Action) -> Main.$w$cshowsPrec 0# w) -}
f8e88cd4b83fd52f06b558a042cfbb53
  $fShowAction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Shoot "#) -}
c2ca3b5c634c3629ab1229da2633a2e6
  $fShowAction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rock "#) -}
e8f1a8dfafd97a2f2cd86708f2f9a555
  $fShowAction4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
6c81d31711a2937c9c24ff02dc612204
  $fShowAction5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Move "#) -}
6a77df680ee4f19ad93f70a2e022306d
  $fShowAction6 :: Main.Rock -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
75fce0c9d96ce3d9147e14daf4216d77
  $fShowAction7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Scan "#) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fShowAction_$cshow :: Main.Action -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Action) ->
                 Main.$fShowAction_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fShowAction_$cshowList :: [Main.Action] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Action
                   Main.$fShowAction1) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $fShowAction_$cshowsPrec ::
    GHC.Types.Int -> Main.Action -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Action) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec ww1 w1 }) -}
ae0f259c37074dbb8f0166254b567b91
  $fShowAsteroidWorld :: GHC.Show.Show Main.AsteroidWorld
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.AsteroidWorld
                  Main.$fShowAsteroidWorld_$cshowsPrec
                  Main.$fShowAsteroidWorld_$cshow
                  Main.$fShowAsteroidWorld_$cshowList -}
ae0f259c37074dbb8f0166254b567b91
  $fShowAsteroidWorld1 :: Main.AsteroidWorld -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Main.$fShowAsteroidWorld_$cshowsPrec
                   Main.$fShowAsteroidWorld2) -}
6e5ca4beeeabffa77035fdd5afc0e198
  $fShowAsteroidWorld10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowAsteroidWorld4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7d534afa9e39751855999efe103b1ce0
  $fShowAsteroidWorld2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
646c35fa919ac021c3ac3d15d046811d
  $fShowAsteroidWorld3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowAsteroidWorld4) -}
10bba9d06addccce98582fa4180061d3
  $fShowAsteroidWorld4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GameOver"#) -}
7f06465b6582992c630a07ad9ddc4fc7
  $fShowAsteroidWorld5 :: Main.Bullet -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Bullet) ->
                 case w of ww { Main.Bullet ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec2 0# ww1 ww2 ww3 }) -}
b659aa2e3b29cde28c19c6a54f2e2a38
  $fShowAsteroidWorld6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bullet "#) -}
0f8445077d215b760ca767b2c48491e5
  $fShowAsteroidWorld7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ship "#) -}
f5cd3811146cb0bfff32b210c142a9e1
  $fShowAsteroidWorld8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Play "#) -}
5a1714efde4490d0ee4e5505df5d6754
  $fShowAsteroidWorld9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UFO "#) -}
ae0f259c37074dbb8f0166254b567b91
  $fShowAsteroidWorld_$cshow :: Main.AsteroidWorld -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Main.AsteroidWorld) ->
                 case x of wild {
                   Main.Play b1 b2 b3 b4
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowAsteroidWorld8
                        (GHC.Show.showList__
                           @ Main.Rock
                           Main.$fShowAction6
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case b2 of ww { Main.Ship ww1 ww2 ->
                               Main.$w$cshowsPrec3
                                 11#
                                 ww1
                                 ww2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (GHC.Show.showList__
                                       @ Main.Bullet
                                       Main.$fShowAsteroidWorld5
                                       b3
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.showSpace1
                                          (case b4 of ww3 { Main.UFO ww4 ww5 ww6 ww7 ->
                                           Main.$w$cshowsPrec4
                                             11#
                                             ww4
                                             ww5
                                             ww6
                                             ww7
                                             (GHC.Types.[] @ GHC.Types.Char) })))) })))
                   Main.GameOver -> Main.$fShowAsteroidWorld10 }) -}
ae0f259c37074dbb8f0166254b567b91
  $fShowAsteroidWorld_$cshowList ::
    [Main.AsteroidWorld] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.AsteroidWorld
                   Main.$fShowAsteroidWorld1) -}
ae0f259c37074dbb8f0166254b567b91
  $fShowAsteroidWorld_$cshowsPrec ::
    GHC.Types.Int -> Main.AsteroidWorld -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Main.AsteroidWorld) ->
                 case ds of wild {
                   Main.Play b1 b2 b3 b4
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b4 of ww { Main.UFO ww1 ww2 ww3 ww4 ->
                          Main.$w$cshowsPrec4 11# ww1 ww2 ww3 ww4 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowAsteroidWorld8
                            (GHC.Show.showList__
                               @ Main.Rock
                               Main.$fShowAction6
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of ww { Main.Ship ww1 ww2 ->
                                   Main.$w$cshowsPrec3
                                     11#
                                     ww1
                                     ww2
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (GHC.Show.showList__
                                           @ Main.Bullet
                                           Main.$fShowAsteroidWorld5
                                           b3
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (g x1)))) })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1)) } }
                   Main.GameOver -> Main.$fShowAsteroidWorld3 }) -}
f59f9c626ac35f52da24e54739bf96a8
  $fShowAsteroidWorld_$s$cshowsPrec ::
    GHC.Types.Int -> Main.UfoPhase Main.Action -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
7f06465b6582992c630a07ad9ddc4fc7
  $fShowBullet :: GHC.Show.Show Main.Bullet
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bullet
                  Main.$fShowBullet_$cshowsPrec
                  Main.$fShowBullet_$cshow
                  Main.$fShowBullet_$cshowList -}
7f06465b6582992c630a07ad9ddc4fc7
  $fShowBullet_$cshow :: Main.Bullet -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U(U),U(U)),U(U(U),U(U)),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bullet) ->
                 Main.$fShowBullet_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7f06465b6582992c630a07ad9ddc4fc7
  $fShowBullet_$cshowList :: [Main.Bullet] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Bullet
                   Main.$fShowAsteroidWorld5) -}
7f06465b6582992c630a07ad9ddc4fc7
  $fShowBullet_$cshowsPrec ::
    GHC.Types.Int -> Main.Bullet -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),U(U(U),U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Bullet) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Bullet ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 } }) -}
6a77df680ee4f19ad93f70a2e022306d
  $fShowRock :: GHC.Show.Show Main.Rock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Rock
                  Main.$fShowRock_$cshowsPrec
                  Main.$fShowRock_$cshow
                  Main.$fShowRock_$cshowList -}
6a77df680ee4f19ad93f70a2e022306d
  $fShowRock_$cshow :: Main.Rock -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Rock) ->
                 Main.$fShowRock_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a77df680ee4f19ad93f70a2e022306d
  $fShowRock_$cshowList :: [Main.Rock] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Rock Main.$fShowAction6) -}
6a77df680ee4f19ad93f70a2e022306d
  $fShowRock_$cshowsPrec ::
    GHC.Types.Int -> Main.Rock -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Rock) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Rock ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
0b32e19b3380b56bb055d57d959a3c34
  $fShowShip :: GHC.Show.Show Main.Ship
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ship
                  Main.$fShowShip_$cshowsPrec
                  Main.$fShowShip_$cshow
                  Main.$fShowShip_$cshowList -}
0b32e19b3380b56bb055d57d959a3c34
  $fShowShip1 :: Main.Ship -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Ship) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Ship ww1 ww2 ->
                 Main.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
0b32e19b3380b56bb055d57d959a3c34
  $fShowShip_$cshow :: Main.Ship -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Ship) ->
                 Main.$fShowShip_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b32e19b3380b56bb055d57d959a3c34
  $fShowShip_$cshowList :: [Main.Ship] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Ship Main.$fShowShip1) -}
0b32e19b3380b56bb055d57d959a3c34
  $fShowShip_$cshowsPrec ::
    GHC.Types.Int -> Main.Ship -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Ship)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Ship ww3 ww4 ->
                 Main.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
b98868f63503e9d83ff1ea682d9c8412
  $fShowUFO :: GHC.Show.Show Main.UFO
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.UFO
                  Main.$fShowUFO_$cshowsPrec
                  Main.$fShowUFO_$cshow
                  Main.$fShowUFO_$cshowList -}
b98868f63503e9d83ff1ea682d9c8412
  $fShowUFO1 :: Main.UFO -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.UFO) ->
                 case w of ww { Main.UFO ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 }) -}
b98868f63503e9d83ff1ea682d9c8412
  $fShowUFO_$cshow :: Main.UFO -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.UFO) ->
                 Main.$fShowUFO_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b98868f63503e9d83ff1ea682d9c8412
  $fShowUFO_$cshowList :: [Main.UFO] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.UFO Main.$fShowUFO1) -}
b98868f63503e9d83ff1ea682d9c8412
  $fShowUFO_$cshowsPrec ::
    GHC.Types.Int -> Main.UFO -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.UFO) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.UFO ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 } }) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fShowUfoPhase ::
    GHC.Show.Show a => GHC.Show.Show (Main.UfoPhase a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Main.UfoPhase a)
                  (Main.$fShowUfoPhase_$cshowsPrec @ a $dShow)
                  (Main.$fShowUfoPhase_$cshow @ a $dShow)
                  (Main.$fShowUfoPhase_$cshowList @ a $dShow) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fShowUfoPhase_$cshow ::
    GHC.Show.Show a => Main.UfoPhase a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.UfoPhase a) ->
                 Main.$fShowUfoPhase_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fShowUfoPhase_$cshowList ::
    GHC.Show.Show a => [Main.UfoPhase a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.UfoPhase a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.UfoPhase a)
                   (Main.$fShowUfoPhase_$cshowsPrec
                      @ a
                      $dShow
                      Main.$fShowAsteroidWorld2)
                   eta
                   eta1) -}
3523fb64ae549eb028d0d3a24e17ea48
  $fShowUfoPhase_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.UfoPhase a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U(U)><S,1*U><L,U> -}
a362c6c9d066a99023fd4c88cd2ee759
  $tc'Bullet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14533057039368359050##
                   4378615470775444077##
                   Main.$trModule
                   Main.$tc'Bullet1) -}
99dd213cea8467e29e682609ea5cf9c4
  $tc'Bullet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bullet"#) -}
e340859c49900dee3da0428b6253f3a6
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16199973784401862832##
                   2186214398592446772##
                   Main.$trModule
                   Main.$tc'Empty1) -}
64fcd37317580c2d5017969ee8cf0b04
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
532d6b507b1871081c819af649775abf
  $tc'GameOver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3451391899980584996##
                   4724146676709662412##
                   Main.$trModule
                   Main.$tc'GameOver1) -}
4bb4eeb44e1c8e869ab5d4aa70265f73
  $tc'GameOver1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GameOver"#) -}
52e88029675d683148ecab99f793dbd6
  $tc'Move :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7236148930334895283##
                   8872056440789529233##
                   Main.$trModule
                   Main.$tc'Move1) -}
862c3e0dc13864e600b7b84171326326
  $tc'Move1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Move"#) -}
06f24336d227a49f6b6d8a3045c9ca01
  $tc'Phase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17562444515447918447##
                   3230089474468919519##
                   Main.$trModule
                   Main.$tc'Phase1) -}
c52db0df8c139b03a240a6ecd902a1e7
  $tc'Phase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Phase"#) -}
f33b08154fa118799fddc592addd197f
  $tc'Play :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11079318598596063466##
                   11767134265205948710##
                   Main.$trModule
                   Main.$tc'Play1) -}
eb3c9defd6ec43d876d99650e0410d89
  $tc'Play1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Play"#) -}
aa110189ab45d1841c9c9ee314f8d420
  $tc'Rock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11353862468912040836##
                   17494350844943924505##
                   Main.$trModule
                   Main.$tc'Rock1) -}
03b98fb10e526a951edec908b228c0e5
  $tc'Rock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rock"#) -}
ea4343fa35ecea2e45db131ece034e04
  $tc'Scan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6589162407917354151##
                   2834857617163325294##
                   Main.$trModule
                   Main.$tc'Scan1) -}
c443141ff1d2100258cf5b97b0f192a7
  $tc'Scan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scan"#) -}
82729510aef7ba748d999dbdf2d0bf7b
  $tc'Ship :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16887846692331552665##
                   6946442089937210802##
                   Main.$trModule
                   Main.$tc'Ship1) -}
59780cbcb505967e93c8791ad6a350ea
  $tc'Ship1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ship"#) -}
4a40eafbe818fccb66700444ee07bbe5
  $tc'Shoot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16874676348593239889##
                   5833440920469204167##
                   Main.$trModule
                   Main.$tc'Shoot1) -}
fa24bcd4cce5ef9a83111d27ce03e8e6
  $tc'Shoot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Shoot"#) -}
7af4342519d7b67466e338cc6ae29978
  $tc'UFO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5435394832701067784##
                   3561466423251570898##
                   Main.$trModule
                   Main.$tc'UFO1) -}
4fef17fa127b7f416c4169f487776a36
  $tc'UFO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UFO"#) -}
9c0dd7daffe0483fcb8a25eff69bd294
  $tcAction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13445774443664034792##
                   1804556067274409981##
                   Main.$trModule
                   Main.$tcAction1) -}
71fb39f86579d65a000639e64f707809
  $tcAction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Action"#) -}
f8c96d5381b513be4d0094135c8a847e
  $tcAsteroidWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14637506219665032653##
                   11299018532447807794##
                   Main.$trModule
                   Main.$tcAsteroidWorld1) -}
861e7edcaf7942bca4f0aced44576f95
  $tcAsteroidWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AsteroidWorld"#) -}
2624aaf39c02c47cc3d278add21ea781
  $tcBullet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5845814067266775939##
                   6995908709638320259##
                   Main.$trModule
                   Main.$tcBullet1) -}
1b112297ba61049096d4c1c91d587180
  $tcBullet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bullet"#) -}
f39a5b3d57469ce97493a6cb21f4bd1d
  $tcRock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10924530836931477975##
                   1449854725703248675##
                   Main.$trModule
                   Main.$tcRock1) -}
d747a499a58608e4070be9dafc39be24
  $tcRock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rock"#) -}
ba8803e17c83d21e85de700084c80fe8
  $tcShip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4552705915324658077##
                   16306820604633315408##
                   Main.$trModule
                   Main.$tcShip1) -}
2183f953ae5192757f096f5bbd9529a8
  $tcShip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ship"#) -}
6b1919abc27931b97fa4dc2f70506403
  $tcUFO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10737662398580684618##
                   8464743173246564403##
                   Main.$trModule
                   Main.$tcUFO1) -}
1a9be6c0d2d14f2a75b6c703eaf6550e
  $tcUFO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UFO"#) -}
ab8f981014ad94d11f786d6caaa26d9d
  $tcUfoPhase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3629527294065049522##
                   5722081499329962295##
                   Main.$trModule
                   Main.$tcUfoPhase1) -}
86313e15deabd11c353c1693e2a6cd18
  $tcUfoPhase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UfoPhase"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
21b2fbe11e213b5d9ccfbd178f3588c5
  $w$c== ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Size)
                   (ww7 :: Main.Velocity) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.F# x1 ->
                           case ww6 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of ww8 { (,) ww9 ww10 ->
                                case ww7 of ww11 { (,) ww12 ww13 ->
                                case ww9 of wild7 { GHC.Types.F# x2 ->
                                case ww12 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.eqFloat ww10 ww13 } } } } } } } } } } } }) -}
0aa2c11c9e0e4cfc86fce19d2470fece
  $w$c==1 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> Main.UfoPhase Main.Action
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> Main.UfoPhase Main.Action
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U><S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity)
                   (ww4 :: Main.UfoPhase Main.Action)
                   (ww5 :: GHC.Prim.Float#)
                   (ww6 :: GHC.Types.Float)
                   (ww7 :: Main.Size)
                   (ww8 :: Main.Velocity)
                   (ww9 :: Main.UfoPhase Main.Action) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww5) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww6 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.F# x1 ->
                           case ww7 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of ww10 { (,) ww11 ww12 ->
                                case ww8 of ww13 { (,) ww14 ww15 ->
                                case ww11 of wild7 { GHC.Types.F# x2 ->
                                case ww14 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww12 of wild10 { GHC.Types.F# x3 ->
                                     case ww15 of wild11 { GHC.Types.F# y3 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x3 y3) of wild12 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> Main.$fEqAsteroidWorld_$s$c==
                                            ww4
                                            ww9 } } } } } } } } } } } } } } }) -}
d632a7b24a092fc8b818bd75b65a9538
  $w$c==2 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> Main.Age
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> Main.Age
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U)><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Velocity)
                   (ww3 :: Main.Age)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Velocity)
                   (ww7 :: Main.Age) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww8 { (,) ww9 ww10 ->
                           case ww6 of ww11 { (,) ww12 ww13 ->
                           case ww9 of wild4 { GHC.Types.F# x1 ->
                           case ww12 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww10 of wild7 { GHC.Types.F# x2 ->
                                case ww13 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.eqFloat ww3 ww7 } } } } } } } } } } } }) -}
c425a5c3893161a46cf5fdae0dbc3386
  $w$c==3 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Velocity)
                   (ww3 :: GHC.Prim.Float#)
                   (ww4 :: GHC.Types.Float)
                   (ww5 :: Main.Velocity) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww4 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww6 { (,) ww7 ww8 ->
                           case ww5 of ww9 { (,) ww10 ww11 ->
                           case ww7 of wild4 { GHC.Types.F# x1 ->
                           case ww10 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.eqFloat ww8 ww11 } } } } } } } } }) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  $w$cshowsPrec :: GHC.Prim.Int# -> Main.Action -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Main.Action) ->
                 case w of wild {
                   Main.Scan b1 b2 b3
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowAction7
                            (GHC.Show.showList__
                               @ Main.Rock
                               Main.$fShowAction6
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of ww1 { (,) ww2 ww3 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows7
                                     (case ww2 of ww4 { GHC.Types.F# ww5 ->
                                      GHC.Float.$w$sshowSignedFloat1
                                        GHC.Float.$fShowFloat_$sshowFloat
                                        GHC.Show.shows22
                                        ww5
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows5
                                           (GHC.Show.$fShow(,)_$sgo
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows4
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showSpace1
                                                    (case b3 of ww6 { GHC.Types.I# ww7 ->
                                                     case GHC.Show.$wshowSignedInt
                                                            11#
                                                            ww7
                                                            x of ww8 { (#,#) ww9 ww10 ->
                                                     GHC.Types.: @ GHC.Types.Char ww9 ww10 } })))
                                              (case ww3 of ww6 { GHC.Types.F# ww7 ->
                                               GHC.Float.$w$sshowSignedFloat1
                                                 GHC.Float.$fShowFloat_$sshowFloat
                                                 GHC.Show.shows22
                                                 ww7 })
                                              (GHC.Types.[] @ GHC.Show.ShowS))) }) })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Main.Move b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowAction5
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowAction5
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           x) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Main.Shoot b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Main.Rock ww2 ww3 ww4 ->
                          Main.$w$cshowsPrec1 11# ww2 ww3 ww4 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowAction2
                            (f (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of ww2 { GHC.Types.I# ww3 ->
                                   case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
ef289ac86244ff1ccc21c3b6ba70fa33
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.PointInSpace
    -> Main.Size
    -> Main.Velocity
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U))><L,1*U(U)><L,U(U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { GHC.Types.F# ww5 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       Main.$fShowAction4
                       ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { (,) ww5 ww6 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww5 of ww7 { GHC.Types.F# ww8 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww8
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (f (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (case ww3 of ww9 { (,) ww10 ww11 ->
                                             GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows7
                                               (case ww10 of ww12 { GHC.Types.F# ww13 ->
                                                GHC.Float.$w$sshowSignedFloat1
                                                  GHC.Float.$fShowFloat_$sshowFloat
                                                  GHC.Show.shows22
                                                  ww13
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows5
                                                     (GHC.Show.$fShow(,)_$sgo
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.shows4
                                                           x)
                                                        (case ww11 of ww14 { GHC.Types.F# ww15 ->
                                                         GHC.Float.$w$sshowSignedFloat1
                                                           GHC.Float.$fShowFloat_$sshowFloat
                                                           GHC.Show.shows22
                                                           ww15 })
                                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })))))
                                (case ww6 of ww9 { GHC.Types.F# ww10 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww10 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowAction3 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAction3
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
aa9db4b92122dbde5abb30bd597e00ea
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.PointInSpace -> Main.Velocity -> Main.Age -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U))><L,U(U(U),U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Velocity)
                   (ww3 :: Main.Age) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww4 { GHC.Types.F# ww5 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       Main.$fShowAction4
                       ww5 }
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { (,) ww5 ww6 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww5 of ww7 { GHC.Types.F# ww8 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww8
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww2 of ww9 { (,) ww10 ww11 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows7
                                         (case ww10 of ww12 { GHC.Types.F# ww13 ->
                                          GHC.Float.$w$sshowSignedFloat1
                                            GHC.Float.$fShowFloat_$sshowFloat
                                            GHC.Show.shows22
                                            ww13
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows5
                                               (GHC.Show.$fShow(,)_$sgo
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows4
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showSpace1
                                                        (g x)))
                                                  (case ww11 of ww14 { GHC.Types.F# ww15 ->
                                                   GHC.Float.$w$sshowSignedFloat1
                                                     GHC.Float.$fShowFloat_$sshowFloat
                                                     GHC.Show.shows22
                                                     ww15 })
                                                  (GHC.Types.[] @ GHC.Show.ShowS))) }) })))
                                (case ww6 of ww9 { GHC.Types.F# ww10 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww10 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld6 (g1 x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld6
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
4285da9f910b63c685db775d444954b5
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Main.PointInSpace
    -> Main.Velocity
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Velocity)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { (,) ww4 ww5 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww4 of ww6 { GHC.Types.F# ww7 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww7
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww2 of ww8 { (,) ww9 ww10 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows7
                                         (case ww9 of ww11 { GHC.Types.F# ww12 ->
                                          GHC.Float.$w$sshowSignedFloat1
                                            GHC.Float.$fShowFloat_$sshowFloat
                                            GHC.Show.shows22
                                            ww12
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows5
                                               (GHC.Show.$fShow(,)_$sgo
                                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                                  (case ww10 of ww13 { GHC.Types.F# ww14 ->
                                                   GHC.Float.$w$sshowSignedFloat1
                                                     GHC.Float.$fShowFloat_$sshowFloat
                                                     GHC.Show.shows22
                                                     ww14 })
                                                  (GHC.Types.[] @ GHC.Show.ShowS))) }) })))
                                (case ww5 of ww8 { GHC.Types.F# ww9 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww9 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld7 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
2e4973320a83f01e19b3d383e61cdb4e
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Main.PointInSpace
    -> Main.Size
    -> Main.Velocity
    -> Main.UfoPhase Main.Action
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,U(U(U),U(U))><L,1*U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity)
                   (ww4 :: Main.UfoPhase Main.Action) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww5 { GHC.Types.F# ww6 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       Main.$fShowAction4
                       ww6 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww5 { (,) ww6 ww7 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww6 of ww8 { GHC.Types.F# ww9 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww9
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (f (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (case ww3 of ww10 { (,) ww11 ww12 ->
                                             GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows7
                                               (case ww11 of ww13 { GHC.Types.F# ww14 ->
                                                GHC.Float.$w$sshowSignedFloat1
                                                  GHC.Float.$fShowFloat_$sshowFloat
                                                  GHC.Show.shows22
                                                  ww14
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows5
                                                     (GHC.Show.$fShow(,)_$sgo
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.shows4
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showSpace1
                                                              (Main.$fShowAsteroidWorld_$s$cshowsPrec
                                                                 Main.$fShowAction4
                                                                 ww4
                                                                 x)))
                                                        (case ww12 of ww15 { GHC.Types.F# ww16 ->
                                                         GHC.Float.$w$sshowSignedFloat1
                                                           GHC.Float.$fShowFloat_$sshowFloat
                                                           GHC.Show.shows22
                                                           ww16 })
                                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })))))
                                (case ww7 of ww10 { GHC.Types.F# ww11 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww11 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld9 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld9
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
c828018cf710b7aaa44bf5b1c180a6c0
  $wrestoreToScreen ::
    GHC.Types.Float
    -> GHC.Types.Float -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Float) (ww1 :: GHC.Types.Float) ->
                 (# case ww of wild { GHC.Types.F# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.ltFloat# x -400.0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.gtFloat# x 400.0#) of wild2 {
                           GHC.Types.False -> wild
                           GHC.Types.True -> GHC.Types.F# (GHC.Prim.minusFloat# x 800.0#) }
                      GHC.Types.True -> GHC.Types.F# (GHC.Prim.plusFloat# 800.0# x) } },
                    case ww1 of wild { GHC.Types.F# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.ltFloat# x -400.0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.gtFloat# x 400.0#) of wild2 {
                           GHC.Types.False -> wild
                           GHC.Types.True -> GHC.Types.F# (GHC.Prim.minusFloat# x 800.0#) }
                      GHC.Types.True
                      -> GHC.Types.F# (GHC.Prim.plusFloat# 800.0# x) } } #)) -}
df01b254cd4877a049fffaf400d6f30c
  $wsplitRock ::
    Main.PointInSpace
    -> Main.Size -> Main.Velocity -> (# Main.Rock, [Main.Rock] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U(U)><L,U(U(U),U(U))>, Inline: [0],
     Unfolding: (\ (ww :: Main.PointInSpace)
                   (ww1 :: Main.Size)
                   (ww2 :: Main.Velocity) ->
                 (# Main.Rock
                      ww
                      (case ww1 of wild { GHC.Types.F# x ->
                       GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                      (case ww2 of wild { (,) x y ->
                       (case x of wild1 { GHC.Types.F# x1 ->
                        case y of wild2 { GHC.Types.F# x2 ->
                        GHC.Types.F#
                          (GHC.Prim.timesFloat#
                             3.0#
                             (GHC.Prim.minusFloat#
                                (GHC.Prim.timesFloat# x1 (GHC.Prim.cosFloat# 1.0471976#))
                                (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# 1.0471976#)))) } },
                        case x of wild1 { GHC.Types.F# x1 ->
                        case y of wild2 { GHC.Types.F# x2 ->
                        GHC.Types.F#
                          (GHC.Prim.timesFloat#
                             3.0#
                             (GHC.Prim.plusFloat#
                                (GHC.Prim.timesFloat# x1 (GHC.Prim.sinFloat# 1.0471976#))
                                (GHC.Prim.timesFloat#
                                   x2
                                   (GHC.Prim.cosFloat# 1.0471976#)))) } }) }),
                    GHC.Types.:
                      @ Main.Rock
                      (Main.Rock
                         ww
                         (case ww1 of wild { GHC.Types.F# x ->
                          GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                         (case ww2 of wild { (,) x y ->
                          (case x of wild1 { GHC.Types.F# x1 ->
                           case y of wild2 { GHC.Types.F# x2 ->
                           GHC.Types.F#
                             (GHC.Prim.timesFloat#
                                3.0#
                                (GHC.Prim.minusFloat#
                                   (GHC.Prim.timesFloat# x1 (GHC.Prim.cosFloat# -1.0471976#))
                                   (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# -1.0471976#)))) } },
                           case x of wild1 { GHC.Types.F# x1 ->
                           case y of wild2 { GHC.Types.F# x2 ->
                           GHC.Types.F#
                             (GHC.Prim.timesFloat#
                                3.0#
                                (GHC.Prim.plusFloat#
                                   (GHC.Prim.timesFloat# x1 (GHC.Prim.sinFloat# -1.0471976#))
                                   (GHC.Prim.timesFloat#
                                      x2
                                      (GHC.Prim.cosFloat# -1.0471976#)))) } }) }))
                      (GHC.Types.[] @ Main.Rock) #)) -}
3888b7ea7b487d0f15286d7d6c92ff19
  (.*) :: GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U)><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Float)
                   (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) u v ->
                 (GHC.Float.timesFloat s u, GHC.Float.timesFloat s v) }) -}
9e677889b92777b41a7bbef8663c89bb
  (.+) :: Main.PointInSpace -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float))
                   (ds1 :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case ds1 of wild1 { (,) u v ->
                 (GHC.Float.plusFloat x u, GHC.Float.plusFloat y v) } }) -}
4b736889e5515f089a3b5051a6b323c4
  (.-) :: Main.PointInSpace -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float))
                   (ds1 :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case ds1 of wild1 { (,) u v ->
                 (GHC.Float.minusFloat x u, GHC.Float.minusFloat y v) } }) -}
5aa3bb34d8f5a48236c86ed7b2d08a06
  data Action
    = Scan [Main.Rock] Main.PointInSpace GHC.Types.Int
    | Move GHC.Types.Int
    | Shoot Main.Rock GHC.Types.Int
280b29f7cb2c98abc69803cd9fdecdf8
  type Age = GHC.Types.Float
ae0f259c37074dbb8f0166254b567b91
  data AsteroidWorld
    = Play [Main.Rock] Main.Ship [Main.Bullet] Main.UFO | GameOver
7f06465b6582992c630a07ad9ddc4fc7
  data Bullet = Bullet Main.PointInSpace Main.Velocity Main.Age
ec7fc31bdbb22a868a082d3966b5b65a
  type PointInSpace = (GHC.Types.Float, GHC.Types.Float)
6a77df680ee4f19ad93f70a2e022306d
  data Rock = Rock Main.PointInSpace Main.Size Main.Velocity
0b32e19b3380b56bb055d57d959a3c34
  data Ship = Ship Main.PointInSpace Main.Velocity
e7070d88aaf59a83d9e0d0886d37620d
  type Size = GHC.Types.Float
b98868f63503e9d83ff1ea682d9c8412
  data UFO
    = UFO Main.PointInSpace
          Main.Size
          Main.Velocity
          (Main.UfoPhase Main.Action)
3523fb64ae549eb028d0d3a24e17ea48
  data UfoPhase a = Phase (a, Main.UfoPhase a) | Empty
7c23489e6a108cb584f6d3e12cd21a9c
  type Velocity = (GHC.Types.Float, GHC.Types.Float)
98072f61d6b44abd561a2a7c8de1531f
  bulletVelocity :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -150.0#) -}
bab4cc2642f1adcbf03b8ddc974c5ddf
  cycleCoordinates :: (GHC.Classes.Ord a, GHC.Num.Num a) => a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLL),U(A,A,1*C1(C1(U)),A,1*C1(C1(U)),A,A,A)><L,U(1*C1(C1(U)),1*C1(C1(U)),A,1*C1(U),A,A,C(U))><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dNum :: GHC.Num.Num a)
                   (x :: a) ->
                 case GHC.Classes.<
                        @ a
                        $dOrd
                        x
                        (GHC.Num.negate
                           @ a
                           $dNum
                           (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates2)) of wild {
                   GHC.Types.False
                   -> case GHC.Classes.>
                             @ a
                             $dOrd
                             x
                             (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates2) of wild1 {
                        GHC.Types.False -> x
                        GHC.Types.True
                        -> GHC.Num.-
                             @ a
                             $dNum
                             x
                             (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates1) }
                   GHC.Types.True
                   -> GHC.Num.+
                        @ a
                        $dNum
                        (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates1)
                        x }) -}
356c9a0f8aac982881902da52048771c
  cycleCoordinates1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (800) -}
2f8675a856d476c7447e67077d1f25e6
  cycleCoordinates2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (400) -}
26bb50c72db04ce33a6d820d76d9f887
  drawWorld ::
    Main.AsteroidWorld -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.AsteroidWorld) ->
                 case ds of wild {
                   Main.Play rocks ds1 bullets dataUFO
                   -> case ds1 of wild1 { Main.Ship ds2 ds3 ->
                      case ds2 of wild2 { (,) x y ->
                      case ds3 of wild3 { (,) vx vy ->
                      case dataUFO of wild4 { Main.UFO ds4 s v exe ->
                      case ds4 of wild5 { (,) xUFO yUFO ->
                      Graphics.Gloss.Internals.Data.Picture.Pictures
                        (GHC.Types.:
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (Graphics.Gloss.Internals.Data.Picture.Color
                              Graphics.Gloss.Data.Color.red
                              (Graphics.Gloss.Internals.Data.Picture.Pictures
                                 (GHC.Types.:
                                    @ Graphics.Gloss.Internals.Data.Picture.Picture
                                    (Graphics.Gloss.Internals.Data.Picture.Translate
                                       x
                                       y
                                       Main.drawWorld10)
                                    (GHC.Types.[]
                                       @ Graphics.Gloss.Internals.Data.Picture.Picture))))
                           (GHC.Types.:
                              @ Graphics.Gloss.Internals.Data.Picture.Picture
                              (Graphics.Gloss.Internals.Data.Picture.Pictures
                                 (Main.drawWorld_go1 rocks))
                              (GHC.Types.:
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 (Graphics.Gloss.Internals.Data.Picture.Pictures
                                    (Main.drawWorld_go bullets))
                                 (GHC.Types.:
                                    @ Graphics.Gloss.Internals.Data.Picture.Picture
                                    (Graphics.Gloss.Internals.Data.Picture.Translate
                                       xUFO
                                       yUFO
                                       (Graphics.Gloss.Internals.Data.Picture.Color
                                          Graphics.Gloss.Data.Color.violet
                                          (Graphics.Gloss.Internals.Data.Picture.Circle s)))
                                    (GHC.Types.:
                                       @ Graphics.Gloss.Internals.Data.Picture.Picture
                                       (case Debug.Trace.trace
                                               @ (GHC.Base.Maybe Main.PointInSpace)
                                               Main.drawWorld9
                                               (case exe of wild6 {
                                                  Main.Phase ds5
                                                  -> case ds5 of wild7 { (,) ds6 ds7 ->
                                                     case ds6 of wild8 {
                                                       DEFAULT
                                                       -> GHC.Base.Nothing @ Main.PointInSpace
                                                       Main.Scan rocks1 direction timer
                                                       -> GHC.Base.Just
                                                            @ Main.PointInSpace
                                                            direction } }
                                                  Main.Empty
                                                  -> GHC.Base.Nothing
                                                       @ Main.PointInSpace }) of wild6 {
                                          GHC.Base.Nothing
                                          -> Graphics.Gloss.Internals.Data.Picture.Blank
                                          GHC.Base.Just direction
                                          -> Graphics.Gloss.Internals.Data.Picture.Color
                                               Graphics.Gloss.Data.Color.green
                                               (Graphics.Gloss.Internals.Data.Picture.Line
                                                  (GHC.Types.:
                                                     @ Main.PointInSpace
                                                     (case direction of wild7 { (,) u v1 ->
                                                      (case u of wild8 { GHC.Types.F# y1 ->
                                                       case xUFO of wild9 { GHC.Types.F# y2 ->
                                                       GHC.Types.F#
                                                         (GHC.Prim.plusFloat#
                                                            (GHC.Prim.timesFloat# 130.0# y1)
                                                            y2) } },
                                                       case v1 of wild8 { GHC.Types.F# y1 ->
                                                       case yUFO of wild9 { GHC.Types.F# y2 ->
                                                       GHC.Types.F#
                                                         (GHC.Prim.plusFloat#
                                                            (GHC.Prim.timesFloat# 130.0# y1)
                                                            y2) } }) })
                                                     (GHC.Types.:
                                                        @ (GHC.Types.Float, GHC.Types.Float)
                                                        wild5
                                                        (GHC.Types.[]
                                                           @ (GHC.Types.Float,
                                                              GHC.Types.Float))))) })
                                       (GHC.Types.[]
                                          @ Graphics.Gloss.Internals.Data.Picture.Picture)))))) } } } } }
                   Main.GameOver -> Main.drawWorld1 }) -}
942e7b102f40e3a37b097c4ae2aa2ded
  drawWorld1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Main.drawWorld8
                   Main.drawWorld8
                   Main.drawWorld2) -}
d3c83d03bbc461c0e54ca4d07c8adc85
  drawWorld10 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Circle
                   Main.drawWorld11) -}
46a716fda900d910e4223a1deca43b9f
  drawWorld11 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 10.0#) -}
f688307125574be9dd98837650c44be5
  drawWorld2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Main.drawWorld7
                   Main.drawWorld6
                   Main.drawWorld3) -}
6568de5e2fc00a0a0442d578ff54c13a
  drawWorld3 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.red
                   Main.drawWorld4) -}
8ffedde2ad0bc0e845213de617185261
  drawWorld4 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Main.drawWorld5) -}
431887ad6f855f01f40e434559c59da6
  drawWorld5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Game Over!"#) -}
37db9121c3815ecf99391975f878a9f9
  drawWorld6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
376562265767bc83b293793c4cc68087
  drawWorld7 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -400.0#) -}
0ce3941222876a4ce07750b91b71fdcb
  drawWorld8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.3#) -}
e1e60ba6bcc5eb4ffe62eca62cdc74e0
  drawWorld9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "yritettiin piirtaa jotakin skannaukseen liittyen"#) -}
c0e68e4cbcfe17e14c86a1f55080b02e
  drawWorld_go ::
    [Main.Bullet] -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
22cb86364d9b769f4239a2d34a57409a
  drawWorld_go1 ::
    [Main.Rock] -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, Strictness: <S,1*U> -}
2de5becb303996f86f94ab5746965f06
  handleEvents ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.AsteroidWorld -> Main.AsteroidWorld
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
23322da8d085e8916d0a4d06beb3259c
  initialWorld :: Main.AsteroidWorld
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.Play
                   Main.initialWorld13
                   Main.initialWorld10
                   (GHC.Types.[] @ Main.Bullet)
                   Main.initialWorld1) -}
92e85c34894f419b2fd4a302a9d44c1b
  initialWorld1 :: Main.UFO
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.UFO
                   Main.initialWorld7
                   Main.initialWorld6
                   Main.initialWorld5
                   Main.initialWorld2) -}
13f86ff9d03e2d3887fc47a472b439ea
  initialWorld10 :: Main.Ship
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Ship Main.initialWorld5 Main.initialWorld11) -}
79b2d1e5284dd8c60917ca290b76ee61
  initialWorld11 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.drawWorld6, Main.initialWorld12)) -}
5e26581a886cc08fef45af51c243d3ab
  initialWorld12 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 5.0#) -}
094db701bdf90f83a8570bf0925d2480
  initialWorld13 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld44
                   Main.initialWorld14) -}
f2665f538860847527fb2a76b7a392d7
  initialWorld14 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld39
                   Main.initialWorld15) -}
423d430be973814d8aece882a785a93b
  initialWorld15 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld34
                   Main.initialWorld16) -}
b3510b029ea3b50bd9770f69a43b25da
  initialWorld16 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld26
                   Main.initialWorld17) -}
794045cea38953e9216da5ffc866bbc7
  initialWorld17 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld18
                   (GHC.Types.[] @ Main.Rock)) -}
2d655e91fc4d1848bf03f772785cbc4b
  initialWorld18 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld23
                   Main.initialWorld22
                   Main.initialWorld19) -}
b4e8e4aa524747a61409299404d11394
  initialWorld19 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld21, Main.initialWorld20)) -}
4ed4ea68213354bb85e4068389c623cb
  initialWorld2 :: Main.UfoPhase Main.Action
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.Phase @ Main.Action Main.initialWorld3) -}
1d3aa5e00b275e800bdca2f05b0019cd
  initialWorld20 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
20af0617a51a60925c13190b2c3128c9
  initialWorld21 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 8.0#) -}
f9598c12acd02341b30da50dfea8e74a
  initialWorld22 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 25.0#) -}
16da5cb683d44970cfafca7a36558dfd
  initialWorld23 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld25, Main.initialWorld24)) -}
ceb9e6c710383595a4be9b07cbdbc14f
  initialWorld24 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -201.0#) -}
9e4255f1afaf1fb36f13edf3d1056f9a
  initialWorld25 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -45.0#) -}
df4ab04984647baf04c632985b4ead2d
  initialWorld26 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld31
                   Main.initialWorld30
                   Main.initialWorld27) -}
cc50d31b6ae4ccfe952cb68e3db2b34c
  initialWorld27 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld29, Main.initialWorld28)) -}
95a6514a80f499cccf0d3b9a84bb449b
  initialWorld28 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -8.0#) -}
0ec964532d5e7cccb5e88db2278c1982
  initialWorld29 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -2.0#) -}
08660d134cbc42b4248eef59a80f8e38
  initialWorld3 :: (Main.Action, Main.UfoPhase Main.Action)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld4, Main.Empty @ Main.Action)) -}
9c671be73a5d639fab9869c06064ae41
  initialWorld30 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 30.0#) -}
f3f6d65051ee1759cfd93728e49d8850
  initialWorld31 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld33, Main.initialWorld32)) -}
c4ba5ffee9e2477472a9e2819c79e068
  initialWorld32 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -15.0#) -}
a2d1dbc30ff6e48d6c11a344a2f59bf6
  initialWorld33 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -210.0#) -}
63af75261fea719ed1d1041e1eebc83c
  initialWorld34 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld36
                   Main.initialWorld22
                   Main.initialWorld35) -}
03201bcb363a66697c6d85adbbe4f9fe
  initialWorld35 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld29, Main.initialWorld21)) -}
e45b409f8682c1d14d6479347bd952f2
  initialWorld36 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld38, Main.initialWorld37)) -}
0c5dfec56ddcf06709dc0facc14d0d94
  initialWorld37 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 22.0#) -}
ce95c9d0a6b6cc51c547cae260a17542
  initialWorld38 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 45.0#) -}
4b33f45cfd07e6f98f1c3fd155d81636
  initialWorld39 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld42
                   Main.initialWorld38
                   Main.initialWorld40) -}
117db9191bf716e00242a549746fe0bf
  initialWorld4 :: Main.Action
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.Move Main.scannerTimer) -}
248aa8fd6fa0e84cf6f7017f49c76c29
  initialWorld40 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld41, Main.initialWorld28)) -}
829024055b0b4fc7a29a3fc743fd9b68
  initialWorld41 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 13.0#) -}
41b1c505e090f0f0a0a0497eca55894a
  initialWorld42 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld25, Main.initialWorld43)) -}
e5fe0b3df577e21c6b9b30729ae6bd15
  initialWorld43 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 201.0#) -}
4305704ddd371009503a81c2f7daf973
  initialWorld44 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld47
                   Main.initialWorld38
                   Main.initialWorld45) -}
d53d340a16864db5b7ce94ed398117a6
  initialWorld45 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld20, Main.initialWorld46)) -}
b87dacd07bed0272e3700d364c151dbe
  initialWorld46 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 6.0#) -}
93214a374e88cf5a510313f672984120
  initialWorld47 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld48, Main.initialWorld48)) -}
5f3cd58bbe15679302f8659e1b66c439
  initialWorld48 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 150.0#) -}
2886e55ad4624f5724ee6067f4d4d54a
  initialWorld5 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.drawWorld6, Main.drawWorld6)) -}
921100759c8fecd28e89821ed4d2088d
  initialWorld6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 20.0#) -}
b6b99dc11217d99133bd59bbe3c9c28d
  initialWorld7 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld9, Main.initialWorld8)) -}
6b566dadfdf3357da5a684b6e8ce85a5
  initialWorld8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -100.0#) -}
e7acc305f55b95cfa164b4dae7735869
  initialWorld9 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 41.0#) -}
986e9a72ad93f0ebb6bf4411ce9a602e
  innerProduct ::
    Main.PointInSpace -> Main.PointInSpace -> GHC.Types.Float
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float))
                   (ds1 :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x1 x2 ->
                 case ds1 of wild1 { (,) y1 y2 ->
                 case x1 of wild2 { GHC.Types.F# x ->
                 case y1 of wild3 { GHC.Types.F# y ->
                 case y2 of wild4 { GHC.Types.F# x4 ->
                 GHC.Types.F#
                   (GHC.Prim.plusFloat#
                      (GHC.Prim.timesFloat# x y)
                      (GHC.Prim.timesFloat# x4 y)) } } } } }) -}
eb4f94691e9bc81a5d9d4e18533b9fab
  limitMag ::
    GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)S(S)),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Main.PointInSpace) ->
                 case w of ww { GHC.Types.F# ww1 ->
                 case w1 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.F# ww6 ->
                 case ww4 of ww7 { GHC.Types.F# ww8 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat#
                           (GHC.Prim.sqrtFloat#
                              (GHC.Prim.plusFloat#
                                 (GHC.Prim.powerFloat# ww6 2.0#)
                                 (GHC.Prim.powerFloat# ww8 2.0#)))
                           ww1) of wild {
                   GHC.Types.False -> (GHC.Types.F# ww6, GHC.Types.F# ww8)
                   GHC.Types.True
                   -> let {
                        m :: GHC.Prim.Float#
                        = GHC.Prim.sqrtFloat#
                            (GHC.Prim.plusFloat#
                               (GHC.Prim.powerFloat# ww6 2.0#)
                               (GHC.Prim.powerFloat# ww8 2.0#))
                      } in
                      (case GHC.Prim.divideFloat# ww6 m of wild2 { DEFAULT ->
                       GHC.Types.F# (GHC.Prim.timesFloat# ww1 wild2) },
                       case GHC.Prim.divideFloat# ww8 m of wild2 { DEFAULT ->
                       GHC.Types.F# (GHC.Prim.timesFloat# ww1 wild2) }) } } } } }) -}
d0938250c1a2d94c2c675fbb7805e219
  magV :: Main.PointInSpace -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.F# x1 ->
                 case y of wild2 { GHC.Types.F# x2 ->
                 GHC.Types.F#
                   (GHC.Prim.sqrtFloat#
                      (GHC.Prim.plusFloat#
                         (GHC.Prim.powerFloat# x1 2.0#)
                         (GHC.Prim.powerFloat# x2 2.0#))) } } }) -}
4779bb9ee8ccf52bf97fd67b428936d2
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
115fe5b0c1d0697f7af61ddf5d6233ca
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Main.AsteroidWorld
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Main.main5
                        Graphics.Gloss.Data.Color.black
                        Main.scannerTimer
                        Main.initialWorld
                        Main.main4
                          `cast`
                        (<Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Main.main3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.AsteroidWorld>_R))
                        Main.main2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.AsteroidWorld>_R))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
5c9b2f48f76088682cd193421934df6b
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Asteroids!"#) -}
f6e80dde24800c518e6b6f45439c0299
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d001348715f669d46081853c10b44626
  main2 ::
    GHC.Types.Float
    -> Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.AsteroidWorld #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (time :: GHC.Types.Float)
                   (world1 :: Main.AsteroidWorld)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.simulateWorld time world1 #)) -}
7bd718e9e7be304b3e6c3abc1043ff55
  main3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.AsteroidWorld #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Main.AsteroidWorld)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.handleEvents event world1 #)) -}
4f42ac67664dd3a08fb5bc30a4935bd4
  main4 ::
    Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x :: Main.AsteroidWorld)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.drawWorld x #)) -}
d8f3f0ba95d0a0dc6620ec3f8d5fe680
  main5 :: Graphics.Gloss.Data.Display.Display
  {- Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   Main.main10
                   Main.main8
                   Main.main6) -}
2cd96f9675f8830d9b03ce47e0ee7c65
  main6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main7, Main.main7)) -}
d6162a267b41b8c2dbc5380ca7c6d9f0
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 20#) -}
ac70b5fdff6a523f6312723dd7eb5ee7
  main8 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main9, Main.main9)) -}
2925d0e7bed9387a087300cbe7cb0395
  main9 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 550#) -}
056dba74d50eb96dd6f981b8afd82e3c
  moveTime :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Main.scannerTimer) -}
7b3717eafa3e49a6450b26ee7216a9f3
  norm :: Main.PointInSpace -> Main.PointInSpace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.PointInSpace) ->
                 case w of ww { (,) ww1 ww2 ->
                 let {
                   m :: GHC.Types.Float
                   = case ww1 of wild { GHC.Types.F# x ->
                     case ww2 of wild1 { GHC.Types.F# x1 ->
                     GHC.Types.F#
                       (GHC.Prim.sqrtFloat#
                          (GHC.Prim.plusFloat#
                             (GHC.Prim.powerFloat# x 2.0#)
                             (GHC.Prim.powerFloat# x1 2.0#))) } }
                 } in
                 (GHC.Float.divideFloat ww1 m, GHC.Float.divideFloat ww2 m) }) -}
e463d91d55eac57b6609acd44e7fcaae
  restoreToScreen :: Main.PointInSpace -> Main.PointInSpace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.PointInSpace) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Main.$wrestoreToScreen ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
68f0227a26e4168a29af72fb669250dc
  rotateV ::
    GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Main.PointInSpace) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 (case ww1 of wild { GHC.Types.F# x ->
                  case w of wild1 { GHC.Types.F# x1 ->
                  case ww2 of wild2 { GHC.Types.F# x2 ->
                  GHC.Types.F#
                    (GHC.Prim.minusFloat#
                       (GHC.Prim.timesFloat# x (GHC.Prim.cosFloat# x1))
                       (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# x1))) } } },
                  case ww1 of wild { GHC.Types.F# x ->
                  case w of wild1 { GHC.Types.F# x1 ->
                  case ww2 of wild2 { GHC.Types.F# x2 ->
                  GHC.Types.F#
                    (GHC.Prim.plusFloat#
                       (GHC.Prim.timesFloat# x (GHC.Prim.sinFloat# x1))
                       (GHC.Prim.timesFloat# x2 (GHC.Prim.cosFloat# x1))) } } }) }) -}
959aa1ab2602d283fbad1638df4c8998
  scannerLength :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 130.0#) -}
7cb3a57251b99d1f06f57910889cad74
  scannerTimer :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
fd3fcdb76cbcd2f54618385c874a0956
  simulateWorld ::
    GHC.Types.Float -> Main.AsteroidWorld -> Main.AsteroidWorld
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U> -}
32208029d49f1de4307cf29ef8452644
  splitRock :: Main.Rock -> [Main.Rock]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U(U),U(U(U),U(U)))>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 case Main.$wsplitRock ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ Main.Rock ww5 ww6 } }) -}
06efef8aada10d5732449caf4ad0518a
  spotArea :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.1#) -}
975bbad75b39a7c3ecb62df2fb04da3e
  ufoVelocity :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.drawWorld11, Main.ufoVelocity1)) -}
7e52b3b622ae1f0ad2cdf4692818e5a4
  ufoVelocity1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 12.0#) -}
e0ace44e0269752fdcf0f738584ae02d
  waitAfterShot :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 120#) -}
instance GHC.Classes.Eq [Main.Action] = Main.$fEqAction
instance GHC.Classes.Eq [Main.AsteroidWorld]
  = Main.$fEqAsteroidWorld
instance GHC.Classes.Eq [Main.Bullet] = Main.$fEqBullet
instance GHC.Classes.Eq [Main.Rock] = Main.$fEqRock
instance GHC.Classes.Eq [Main.Ship] = Main.$fEqShip
instance GHC.Classes.Eq [Main.UFO] = Main.$fEqUFO
instance GHC.Classes.Eq [Main.UfoPhase] = Main.$fEqUfoPhase
instance GHC.Show.Show [Main.Action] = Main.$fShowAction
instance GHC.Show.Show [Main.AsteroidWorld]
  = Main.$fShowAsteroidWorld
instance GHC.Show.Show [Main.Bullet] = Main.$fShowBullet
instance GHC.Show.Show [Main.Rock] = Main.$fShowRock
instance GHC.Show.Show [Main.Ship] = Main.$fShowShip
instance GHC.Show.Show [Main.UFO] = Main.$fShowUFO
instance GHC.Show.Show [Main.UfoPhase] = Main.$fShowUfoPhase
"SPEC $c== @ Action" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                Main.Action)
  Main.$fEqUfoPhase_$c== @ Main.Action $dEq
  = Main.$fEqAsteroidWorld_$s$c==
"SPEC $cshowsPrec @ Action" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         Main.Action)
  Main.$fShowUfoPhase_$cshowsPrec @ Main.Action $dShow
  = Main.$fShowAsteroidWorld_$s$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

